<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

<entry key="builder_constructors"><![CDATA[
	protected final Book<? extends Color, ? extends Paper<? extends Color>, ? extends Recordable<? extends Color>, ? extends List<? extends Paper<? extends Color>>> $$$wrapped;

	protected final P $$$parentBuilder;
	
	public BookBuilderSpec() {
		this.$$$wrapped = null;
		this.$$$parentBuilder = null;
	}
	
	public BookBuilderSpec(P parentBuilder) {
		this.$$$wrapped = null;
		this.$$$parentBuilder = parentBuilder;
	}

	protected BookBuilderSpec(Book<? extends Color, ? extends Paper<? extends Color>, ? extends Recordable<? extends Color>, ? extends List<? extends Paper<? extends Color>>> wrapped) {
		if (wrapped == null) {
			throw new NullPointerException();
		}
		this.$$$wrapped = wrapped;
		this.$$$parentBuilder = null;
	}
	
    public BookBuilderSpec<P> storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }

	public Book<? extends Color, ? extends Paper<? extends Color>, ? extends Recordable<? extends Color>, ? extends List<? extends Paper<? extends Color>>> getWrappedObject() {
		return this.$$$wrapped;
	}

	protected void verifyMutable() {
		if (this.$$$wrapped != null) {
    		throw new IllegalStateException("Cannot mutate fields of immutable objects");
		}
	}

	public P end() {
		return this.$$$parentBuilder;
	}

    public Book<? extends Color, ? extends Paper<? extends Color>, ? extends Recordable<? extends Color>, ? extends List<? extends Paper<? extends Color>>> toBook() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Book.class);
    }

	//{1 only exist if type variables exist
    public <C extends Color & Serializable, T extends Paper<C>, R extends Recordable<C>, L extends List<? extends T>> Book<C, T, R, L> toBook(Class<C> C, Class<T> T, Class<R> R, Class<L> L) {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Book.class);
    }
    //}1
]]></entry>

<entry key="subclass_constructors"><![CDATA[
	public FictionBuilderSpec() {
		super();
	}
	
	public FictionBuilderSpec(P parentBuilder) {
		super(parentBuilder);
	}

	protected FictionBuilderSpec(Fiction<? extends Color, ? extends Recordable<? extends Color>, ? extends Set<? super Recordable<? extends Color>>> wrapped) {
		super(wrapped);
	}

	@Override
    public FictionBuilderSpec<P> storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }

	@Override
	public Fiction<? extends Color, ? extends Recordable<? extends Color>, ? extends Set<? super Recordable<? extends Color>>> getWrappedObject() {
		return (Fiction<? extends Color, ? extends Recordable<? extends Color>, ? extends Set<? super Recordable<? extends Color>>>)this.$$$wrapped;
	}

    public Fiction<? extends Color, ? extends Recordable<? extends Color>, ? extends Set<? super Recordable<? extends Color>>> toFiction() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Fiction.class);
    }
    
    //{1 only exist if type variables exist
    public <C extends Color & Serializable, R extends Recordable<C>, S extends Set<? super R>> Fiction<C, R, S> toFiction(Class<C> C, Class<R> R, Class<S> S) {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Fiction.class);
    }
	
	//}1
	//{2 only exist if has super class
	@Override
    public Fiction<? extends Color, ? extends Recordable<? extends Color>, ? extends Set<? super Recordable<? extends Color>>> toBook() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Fiction.class);
    }
    
    //}2
]]></entry>

<entry key="subclass_build_methods"><![CDATA[
    @Override
    public SubSample toSample() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(SubSample.class);
    }
]]></entry>

<entry key="builder_fieldname_getter_settter"><![CDATA[
	private PaperBuilderSpec<?> myPaper;
	
	public PaperBuilderSpec<?> getMyPaper() {
		if (this.$$$wrapped != null && WrapHelper.valueNotSet(this.myPaper, PaperBuilderSpec.class)) {
			Object o = WrapHelper.getValue(this.$$$wrapped, Book.class, "myPaper");
			this.myPaper = new WrapConverter(Builders.DESTINATION_CLASS_RESOLVER).convert(o).to(PaperBuilderSpec.class);
		}

		return myPaper;
	}

	public void setMyPaper(PaperBuilderSpec<?> myPaper) {
		verifyMutable();
		this.myPaper = myPaper;
	}
]]></entry>

<entry key="builder_single_type_field"><![CDATA[
	public BookBuilderSpec<P> myPaper(PaperBuilderSpec<?> myPaper) {
		verifyMutable();
		this.myPaper = myPaper;
		return this;
	}
]]></entry>

<entry key="subclass_single_type_field"><![CDATA[
	@Override
	public FictionBuilderSpec<P> myPaper(PaperBuilderSpec<?> myPaper) {
		return (FictionBuilderSpec<P>)super.myPaper(myPaper);
	}
]]></entry>

<entry key="builder_single_type_builder_field_subedit_each_subclass"><![CDATA[
	public CopyPaperBuilderSpec<? extends BookBuilderSpec<P>> myPaper$asCopyPaper$begin() {
		verifyMutable();
		CopyPaperBuilderSpec<BookBuilderSpec<P>> result = new CopyPaperBuilderSpec<BookBuilderSpec<P>>(this);
		this.myPaper = result;
		return result;
	}
]]></entry>

<entry key="builder_single_type_builder_field_subedit"><![CDATA[
	public PaperBuilderSpec<? extends BookBuilderSpec<P>> myPaper$begin() {
		verifyMutable();
		PaperBuilderSpec<BookBuilderSpec<P>> result = new PaperBuilderSpec<BookBuilderSpec<P>>(this);
		this.myPaper = result;
		return result;
	}
]]></entry>

<entry key="builder_single_type_builder_field"><![CDATA[
    public BookBuilderSpec<P> myPaper$wrap(Paper myPaper) {
    	verifyMutable();
    	this.myPaper = new WrapConverter(BuilderSpecs.DESTINATION_CLASS_RESOLVER).convert(myPaper).to(PaperBuilderSpec.class);
        return this;
    }
    
    public BookBuilderSpec<P> myPaper$restoreFrom(BuilderRepository repo, Object builderId) {
    	verifyMutable();
    	
        Object restoredObject = repo.get(builderId);
        if (restoredObject == null) {
        	if (repo.isSupportLazy()) {
        		repo.addObjectStoredListener(builderId, new Procedure() {
					public void execute(Object... arguments) {
						BookBuilderSpec.this.myPaper = (PaperBuilderSpec<?>)arguments[0];
					}
				});
        	}
        	else {
                throw new IllegalStateException("Object does not exist with id " + builderId);
        	}
        }
        else if (!(restoredObject instanceof PaperBuilderSpec)) {
        	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + PaperBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
        }
        else {
            this.myPaper = (PaperBuilderSpec<?>)restoredObject;
        }
        return this;
    }
]]></entry>

<entry key="subclass_single_type_builder_field"><![CDATA[
	@Override
    public SubSampleBuilderSpec<P> blank$wrap(Blank blank) {
		return (SubSampleBuilderSpec<P>)super.blank$wrap(blank);
    }

	@Override
    public SubSampleBuilderSpec<P> blank$restoreFrom(BuilderRepository repo, Object builderId) {
		return (SubSampleBuilderSpec<P>)super.blank$restoreFrom(repo, builderId);
    }
]]></entry>

<entry key="subclass_single_type_builder_field_subedit"><![CDATA[
	@SuppressWarnings("unchecked")
	@Override
	public PaperBuilder<? extends FictionBuilder<P>> myPaper$begin() {
		return (PaperBuilder<? extends FictionBuilder<P>>)super.myPaper$begin();
	}
]]></entry>

<entry key="subclass_single_type_builder_field_subedit_each_subclass"><![CDATA[
	@Override
	public CopyPaperBuilderSpec<? extends FictionBuilderSpec<P>> myPaper$asCopyPaper$begin() {
		return (CopyPaperBuilderSpec<? extends FictionBuilderSpec<P>>)super.myPaper$asCopyPaper$begin();
	}
]]></entry>


<entry key="builder_collection"><![CDATA[
	public BookBuilderSpec<P> myPapers(PaperBuilderSpec<?> ... myPapers) {
		verifyMutable();
		return myPapers(new ListBuilder<PaperBuilderSpec<?>>().add(myPapers).toList());
	}
	
	public BookBuilderSpec<P> myPapers(Collection<PaperBuilderSpec<?>> myPapers) {
		verifyMutable();
		if (this.myPapers == null) {
			this.myPapers = new ArrayList<PaperBuilderSpec<?>>();
		}
		if (myPapers != null) {
			for (PaperBuilderSpec<?> e : myPapers) {
				CollectionUtils.addItem(this.myPapers, e);
			}
		}
		return this;
	}

	//{1 element type is also a builder
	//{2 repeat this for each class & subclass
	public CopyPaperBuilderSpec<? extends BookBuilderSpec<P>> myPapers$addCopyPaper() {
		verifyMutable();
		if (this.myPapers == null) {
			this.myPapers = new ArrayList<PaperBuilderSpec<?>>();
		}
		
		CopyPaperBuilderSpec<BookBuilderSpec<P>> result =
				new CopyPaperBuilderSpec<BookBuilderSpec<P>>(this);
		
		CollectionUtils.addItem(this.myPapers, result);
		
		return result;
	}
	
	//}2
	public class MyPapers$$$builder<P1 extends BookBuilderSpec<P>> {
	
		private final P1 $$$parentBuilder1;
	
		protected MyPapers$$$builder(P1 parentBuilder) {
			this.$$$parentBuilder1 = parentBuilder;
		}

		//{3 repeat this for each class & subclass	
		public CopyPaperBuilderSpec<MyPapers$$$builder<P1>> copyPaper$begin() {
			CopyPaperBuilderSpec<MyPapers$$$builder<P1>> result = new CopyPaperBuilderSpec<MyPapers$$$builder<P1>>(this);
			CollectionUtils.addItem(BookBuilderSpec.this.myPapers, result);
			return result;
		}
		
		//}3
		public P1 end() {
			return this.$$$parentBuilder1;
		}
	}
	
	public MyPapers$$$builder<? extends BookBuilderSpec<P>> myPapers$list() {
		verifyMutable();
		if (this.myPapers == null) {
			this.myPapers = new ArrayList<PaperBuilderSpec<?>>();
		}
		return new MyPapers$$$builder<BookBuilderSpec<P>>(this);
	}

    public BookBuilderSpec<P> myPapers$wrap(Paper ... myPapers) {
    	return myPapers$wrap(new ListBuilder<Paper>().add(myPapers).toList());
    }

    public BookBuilderSpec<P> myPapers$wrap(Collection<? extends Paper> myPapers) {
		verifyMutable();

		if (this.myPapers == null) {
			this.myPapers = new ArrayList<PaperBuilderSpec<?>>();
		}
		if (myPapers != null) {
			for (Paper e : myPapers) {
				PaperBuilderSpec<?> wrapped = new WrapConverter(BuilderSpecs.DESTINATION_CLASS_RESOLVER).convert(e).to(PaperBuilderSpec.class);
				CollectionUtils.addItem(this.myPapers, wrapped);
			}
		}
		return this;
    }
    
    public BookBuilderSpec<P> myPapers$restoreFrom(BuilderRepository repo, Object ... builderIds) {
    	return myPapers$restoreFrom(repo, new ListBuilder<Object>().add(builderIds).toList());
    }

    public BookBuilderSpec<P> myPapers$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		verifyMutable();

		if (this.myPapers == null) {
			this.myPapers = new ArrayList<PaperBuilderSpec<?>>();
		}
		if (builderIds != null) {
	    	for (Object builderId : builderIds) {
	            Object restoredObject = repo.get(builderId);
	            if (restoredObject == null) {
	            	if (repo.isSupportLazy()) {
	            		repo.addObjectStoredListener(builderId, new Procedure() {
	    					public void execute(Object... arguments) {
	    						CollectionUtils.addItem(BookBuilderSpec.this.myPapers, arguments[0]);
	    					}
	    				});
	            	}
	            	else {
	                    throw new IllegalStateException("Object does not exist with id " + builderId);
	            	}
	            }
	            else if (!(restoredObject instanceof PaperBuilderSpec)) {
	            	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + PaperBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
	            }
	            else {
	                CollectionUtils.addItem(this.myPapers, restoredObject);
	            }
	    	}
		}
        return this;
    }
    //}1
]]></entry>

<entry key="subclass_collection"><![CDATA[
	@Override
	public FictionBuilderSpec<P> myPapers(PaperBuilderSpec<?> ... myPapers) {
		return (FictionBuilderSpec<P>)super.myPapers(myPapers);
	}

	@Override
	public FictionBuilderSpec<P> myPapers(Collection<PaperBuilderSpec<?>> myPapers) {
		return (FictionBuilderSpec<P>)super.myPapers(myPapers);
	}

	//{1 only exist if field is builder
	//{2 for each subclass
	@Override
	public CopyPaperBuilderSpec<? extends FictionBuilderSpec<P>> myPapers$addCopyPaper() {
		return (CopyPaperBuilderSpec<? extends FictionBuilderSpec<P>>)super.myPapers$addCopyPaper();
	}
	
	//}2
	public MyPapers$$$builder<? extends FictionBuilderSpec<P>> myPapers$list() {
		return (MyPapers$$$builder<? extends FictionBuilderSpec<P>>)super.myPapers$list();
	}
	
	@Override
    public FictionBuilderSpec<P> myPapers$wrap(Paper ... myPapers) {
		return (FictionBuilderSpec<P>)super.myPapers$wrap(myPapers);
    }

	@Override
    public FictionBuilderSpec<P> myPapers$wrap(Collection<? extends Paper> myPapers) {
		return (FictionBuilderSpec<P>)super.myPapers$wrap(myPapers);
    }

	@Override
    public FictionBuilderSpec<P> myPapers$restoreFrom(BuilderRepository repo, Object ... builderIds) {
		return (FictionBuilderSpec<P>)super.myPapers$restoreFrom(repo, builderIds);
    }

	@Override
    public FictionBuilderSpec<P> myPapers$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		return (FictionBuilderSpec<P>)super.myPapers$restoreFrom(repo, builderIds);
    }
    //}1
]]></entry>

<entry key="builder_map"><![CDATA[
	public BookBuilderSpec<P> paperColors(Map<PaperBuilderSpec<?>, ColorBuilderSpec<?>> paperColors) {
		verifyMutable();

		if (this.paperColors == null) {
			this.paperColors = new HashMap<PaperBuilderSpec<?>, ColorBuilderSpec<?>>();
		}
		if (paperColors != null) {
			for (Map.Entry<PaperBuilderSpec<?>, ColorBuilderSpec<?>> e : paperColors.entrySet()) {
				CollectionUtils.putItem(this.paperColors, e.getKey(), e.getValue());
			}
		}
		return this;
	}

	public class PaperColors$builder<P1 extends BookBuilderSpec<P>> {
		
		private final P1 $$$parentBuilder;
		
		public class Value$builder {

			private PaperBuilderSpec<?> key;

			private Value$builder(PaperBuilderSpec<?> key) {
				this.key = key;
			}

			public PaperColors$builder<P1> value(ColorBuilderSpec<?> value) {
				CollectionUtils.putItem(BookBuilderSpec.this.paperColors, key, value);
				return PaperColors$builder.this;
			}

			//{1 only exist if value is builder, loop through each value's class & subclass
			public RGBColorBuilderSpec<PaperColors$builder<P1>> value$asRGBColor() {
				RGBColorBuilderSpec<PaperColors$builder<P1>> result = new RGBColorBuilderSpec<PaperColors$builder<P1>>(PaperColors$builder.this);
				CollectionUtils.putItem(BookBuilderSpec.this.paperColors, key, result);
				return result;
			}
			
			//}1
		}
		
		private PaperColors$builder(P1 parentBuilder) {
			this.$$$parentBuilder = parentBuilder;
		}
		
		public Value$builder key(PaperBuilderSpec<?> key) {
			return new Value$builder(key);
		}
		
		//{2 only exist if key is also builder, loop through each key's class & subclass;
		public CopyPaperBuilderSpec<Value$builder> key$asCopyPaper() {
			CopyPaperBuilderSpec<Value$builder> result = new CopyPaperBuilderSpec<Value$builder>(new Value$builder(null));
			result.$$$parentBuilder.key = result;
			return result;
		}
		
		//}2
		public P1 end() {
			return this.$$$parentBuilder;
		}
	}
	
	public PaperColors$builder<? extends BookBuilderSpec<P>> paperColors$map() {
		verifyMutable();

		if (this.paperColors == null) {
			this.paperColors = new HashMap<PaperBuilderSpec<?>, ColorBuilderSpec<?>>();
		}
		return new PaperColors$builder<BookBuilderSpec<P>>(this);
	}	
]]></entry>

<entry key="builder_map_type_field"><![CDATA[
	public SampleBuilderSpec<P> keywordCounts(Map<String, Integer> keywordCounts) {
		verifyMutable();

		if (this.keywordCounts == null) {
			this.keywordCounts = new HashMap<String, Integer>();
		}
		if (keywordCounts != null) {
			for (Map.Entry<String, Integer> e : keywordCounts.entrySet()) {
				CollectionUtils.putItem(this.keywordCounts, e.getKey(), e.getValue());
			}
		}
		return this;
	}

	public class KeywordCounts$builder<P1 extends SampleBuilderSpec<P>> {
		
		private final P1 $$$parentBuilder;
		
		public class Value$builder {
			private String key;
			private Value$builder(String key) {
				this.key = key;
			}
			public KeywordCounts$builder<P1> value(Integer value) {
				CollectionUtils.putItem(SampleBuilderSpec.this.keywordCounts, key, value);
				return KeywordCounts$builder.this;
			}
		}
		
		private KeywordCounts$builder(P1 parentBuilder) {
			this.$$$parentBuilder = parentBuilder;
		}
		
		public Value$builder key(String key) {
			return new Value$builder(key);
		}
		
		public P1 end() {
			return this.$$$parentBuilder;
		}
	}
	
	public KeywordCounts$builder<? extends SampleBuilderSpec<P>> keywordCounts$map() {
		verifyMutable();

		if (this.keywordCounts == null) {
			this.keywordCounts = new HashMap<String, Integer>();
		}
		return new KeywordCounts$builder<SampleBuilderSpec<P>>(this);
	}	
]]></entry>

<entry key="subclass_map_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec<P> keywordCounts(Map<String, Integer> keywordCounts) {
		return (SubSampleBuilderSpec<P>)super.keywordCounts(keywordCounts);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public KeywordCounts$builder<? extends SubSampleBuilderSpec<P>> keywordCounts$map() {
		return (KeywordCounts$builder<? extends SubSampleBuilderSpec<P>>)super.keywordCounts$map();
	}
]]></entry>


<entry key="custom_code_marker"><![CDATA[
    /* CUSTOM CODE *********************************
     * 
     * Put your own custom code below. These codes won't be discarded during generation.
     * 
     */
     
     
     
]]></entry>



















<entry key="builders_declare"><![CDATA[
package packageName;

import org.nebulae2us.electron.*;
import org.nebulae2us.electron.util.*;
import Person;
public class BuilderSpecs {

	public static final DestinationClassResolver DESTINATION_CLASS_RESOLVER = new DestinationClassResolverByMap(
			new MapBuilder<Class<?>, Class<?>> ()
				.put(Person.class, PersonBuilder.class)
			.toMap()
			);

	public static Converter converter() {
		return new Converter(DESTINATION_CLASS_RESOLVER, true);
	}
]]></entry>

<entry key="builders_each_model_class"><![CDATA[
    public static BookBuilderSpec<?> book() {
        return new BookBuilderSpec<Object>();
    }

    public static BookBuilderSpec<?> book$restoreFrom(BuilderRepository repo, int builderId) {
        return (BookBuilderSpec<?>)repo.get(builderId);
    }

    public static BookBuilderSpec<?> book$copyFrom(Book book) {
    	BookBuilderSpec<?> result = new Converter(DESTINATION_CLASS_RESOLVER, false).convert(book).to(BookBuilderSpec.class);
    	return result;
    }
    
    public static BookBuilderSpec<?> wrap(Book book) {
    	return new WrapConverter(DESTINATION_CLASS_RESOLVER).convert(book).to(BookBuilderSpec.class);
    }
]]></entry>


</properties>
