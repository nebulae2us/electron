<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

<entry key="builder_constructors"><![CDATA[
	protected final Sample $$$wrapped;

	protected final ConverterOption $$$option;
	
	public SampleBuilderSpec() {
		this(null, null);
	}
	
	public SampleBuilderSpec(ConverterOption option) {
		this(null, option);
	}

	protected SampleBuilderSpec(Sample wrapped, ConverterOption option) {
		this.$$$wrapped = wrapped;
		this.$$$option = option;
	}
	
    public SampleBuilderSpec storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }

	public Sample getWrappedObject() {
		return this.$$$wrapped;
	}

	protected void verifyMutable() {
		if (this.$$$wrapped != null) {
    		throw new IllegalStateException("Cannot mutate fields of immutable objects");
		}
	}

    public Sample toSample() {
    	return new Converter(this.$$$option, true).convert(this).to(Sample.class);
    }
]]></entry>

<entry key="subclass_constructors"><![CDATA[
	public SubSampleBuilderSpec() {
		super();
	}
	
	public SubSampleBuilderSpec(ConverterOption option) {
		super(option);
	}

	protected SubSampleBuilderSpec(SubSample wrapped, ConverterOption option) {
		super(wrapped, option);
	}

	@Override
	public SubSample getWrappedObject() {
		return (SubSample)this.$$$wrapped;
	}

	@Override
    public SubSampleBuilderSpec storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }
	
    public SubSample toSubSample() {
    	return new Converter(this.$$$option, true).convert(this).to(SubSample.class);
    }
]]></entry>

<entry key="subclass_build_methods"><![CDATA[
    @Override
    public SubSample toSample() {
    	return new Converter(this.$$$option, true).convert(this).to(SubSample.class);
    }
]]></entry>

<entry key="builder_fieldname_getter_settter"><![CDATA[
	private String name;
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		verifyMutable();
		this.name = name;
	}
]]></entry>

<entry key="builder_single_type_field"><![CDATA[
	public SampleBuilderSpec name(String name) {
		verifyMutable();
		this.name = name;
		return this;
	}
]]></entry>

<entry key="subclass_single_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec name(String name) {
		return (SubSampleBuilderSpec)super.name(name);
	}
]]></entry>

<entry key="builder_single_type_builder_field"><![CDATA[
    public SampleBuilderSpec blank$wrap(Blank blank) {
    	verifyMutable();
    	this.blank = new WrapConverter(this.$$$option).convert(blank).to(BlankBuilderSpec.class);
        return this;
    }
    
    public SampleBuilderSpec blank$restoreFrom(BuilderRepository repo, Object builderId) {
    	verifyMutable();
    	
        Object restoredObject = repo.get(builderId);
        if (restoredObject == null) {
        	if (repo.isSupportLazy()) {
        		repo.addObjectStoredListener(builderId, new Procedure() {
					public void execute(Object... arguments) {
						SampleBuilderSpec.this.blank = (BlankBuilderSpec)arguments[0];
					}
				});
        	}
        	else {
                throw new IllegalStateException("Object does not exist with id " + builderId);
        	}
        }
        else if (!(restoredObject instanceof BlankBuilderSpec)) {
        	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + BlankBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
        }
        else {
            this.blank = (BlankBuilderSpec)restoredObject;
        }
        return this;
    }
]]></entry>

<entry key="subclass_single_type_builder_field"><![CDATA[
	@Override
    public SubSampleBuilderSpec blank$wrap(Blank blank) {
		return (SubSampleBuilderSpec)super.blank$wrap(blank);
    }

	@Override
    public SubSampleBuilderSpec blank$restoreFrom(BuilderRepository repo, Object builderId) {
		return (SubSampleBuilderSpec)super.blank$restoreFrom(repo, builderId);
    }
]]></entry>

<entry key="builder_collection_type_field"><![CDATA[
	public SampleBuilderSpec names(String ... names) {
		verifyMutable();
		return names(new ListBuilder<String>().add(names).toList());
	}
	
	public SampleBuilderSpec names(Collection<String> names) {
		verifyMutable();
		if (this.names == null) {
			this.names = new ArrayList<String>();
		}
		if (names != null) {
			for (String e : names) {
				this.names.add(e);
			}
		}
		return this;
	}
]]></entry>

<entry key="subclass_collection_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec names(String ... names) {
		return (SubSampleBuilderSpec)super.names(names);
	}

	@Override
	public SubSampleBuilderSpec names(Collection<String> names) {
		return (SubSampleBuilderSpec)super.names(names);
	}
]]></entry>

<entry key="builder_collection_type_builder_field"><![CDATA[
    public SampleBuilderSpec blanks$wrap(Blank ... blanks) {
    	return blanks$wrap(new ListBuilder<Blank>().add(blanks).toList());
    }

    public SampleBuilderSpec blanks$wrap(Collection<Blank> blanks) {
		verifyMutable();

		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec>();
		}
		if (blanks != null) {
			for (Blank e : blanks) {
				BlankBuilderSpec wrapped = new WrapConverter(this.$$$option).convert(e).to(BlankBuilderSpec.class);
				this.blanks.add(wrapped);
			}
		}
		return this;
    }
    
    public SampleBuilderSpec blanks$restoreFrom(BuilderRepository repo, Object ... builderIds) {
    	return blanks$restoreFrom(repo, new ListBuilder<Object>().add(builderIds).toList());
    }

    public SampleBuilderSpec blanks$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		verifyMutable();

		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec>();
		}
		if (builderIds != null) {
	    	for (Object builderId : builderIds) {
	            Object restoredObject = repo.get(builderId);
	            if (restoredObject == null) {
	            	if (repo.isSupportLazy()) {
	            		repo.addObjectStoredListener(builderId, new Procedure() {
	    					public void execute(Object... arguments) {
	    						SampleBuilderSpec.this.blanks.add((BlankBuilderSpec)arguments[0]);
	    					}
	    				});
	            	}
	            	else {
	                    throw new IllegalStateException("Object does not exist with id " + builderId);
	            	}
	            }
	            else if (!(restoredObject instanceof BlankBuilderSpec)) {
	            	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + BlankBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
	            }
	            else {
	                this.blanks.add((BlankBuilderSpec)restoredObject);
	            }
	    	}
		}
        return this;
    }
]]></entry>

<entry key="subclass_collection_type_builder_field"><![CDATA[
	@Override
    public SubSampleBuilderSpec blanks$wrap(Blank ... blanks) {
		return (SubSampleBuilderSpec)super.blanks$wrap(blanks);
    }

	@Override
    public SubSampleBuilderSpec blanks$wrap(Collection<Blank> blanks) {
		return (SubSampleBuilderSpec)super.blanks$wrap(blanks);
    }

	@Override
    public SubSampleBuilderSpec blanks$restoreFrom(BuilderRepository repo, Object ... builderIds) {
		return (SubSampleBuilderSpec)super.blanks$restoreFrom(repo, builderIds);
    }

	@Override
    public SubSampleBuilderSpec blanks$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		return (SubSampleBuilderSpec)super.blanks$restoreFrom(repo, builderIds);
    }
]]></entry>

<entry key="builder_map_type_field"><![CDATA[
	public ChainedMapBuilder<? extends SampleBuilderSpec, String, Integer> keywordCounts$begin() {
		verifyMutable();

		if (this.keywordCounts == null) {
			this.keywordCounts = new HashMap<String, Integer>();
		}
		return new ChainedMapBuilder<SampleBuilderSpec, String, Integer>(
				String.class,
				Integer.class,
				SampleBuilderSpec.this.$$$option,
				this,
				new Procedure() {
					public void execute(Object... arguments) {
						String key = (String)arguments[0];
						Integer value = (Integer)arguments[1];
						SampleBuilderSpec.this.keywordCounts.put(key, value);
					}
				}
				);
	}

	public SampleBuilderSpec keywordCounts(Map<String, Integer> keywordCounts) {
		verifyMutable();

		if (this.keywordCounts == null) {
			this.keywordCounts = new HashMap<String, Integer>();
		}
		if (keywordCounts != null) {
			for (Map.Entry<String, Integer> e : keywordCounts.entrySet()) {
				this.keywordCounts.put(e.getKey(), e.getValue());
			}
		}
		return this;
	}
]]></entry>

<entry key="subclass_map_type_field"><![CDATA[
	@SuppressWarnings("unchecked")
	@Override
	public ChainedMapBuilder<? extends SubSampleBuilderSpec, String, Integer> keywordCounts$begin() {
		return (ChainedMapBuilder<? extends SubSampleBuilderSpec, String, Integer>)super.keywordCounts$begin();
	}

	@Override
	public SubSampleBuilderSpec keywordCounts(Map<String, Integer> keywordCounts) {
		return (SubSampleBuilderSpec)super.keywordCounts(keywordCounts);
	}
]]></entry>






















<entry key="builders_declare"><![CDATA[
package packageName;

import org.nebulae2us.electron.*;
import org.nebulae2us.electron.util.*;
import Person;
public class Builders {

	public static final ConverterOption CONVERTER_OPTIONS = new ConverterOption(
			new MapBuilder<Class<?>, Class<?>> ()
				.put(Person.class, PersonBuilder.class)
			.toMap()
			);

]]></entry>

<entry key="builders_each_model_class"><![CDATA[
    public static PersonBuilder person() {
        return new PersonBuilder(CONVERTER_OPTIONS);
    }

    public static PersonBuilder person$restoreFrom(BuilderRepository repo, int builderId) {
        return (PersonBuilder)repo.get(builderId);
    }

    public static PersonBuilder person$copyFrom(Person person) {
    	PersonBuilder result = new Converter(CONVERTER_OPTIONS, false).convert(person).to(PersonBuilder.class);
    	return result;
    }
]]></entry>

<entry key="builder_constructors_methods"><![CDATA[
	private final Person $$$savedTarget;

	private ConverterOption $$$option;

	private final B $$$parentBuilder;

	protected PersonBuilder(Person person) {
		// super(person);
		if (person == null) {
			throw new NullPointerException();
		}
	
		this.$$$option = ConverterOptions.EMPTY_IMMUTABLE_OPTION;
		this.$$$parentBuilder = null;
		this.$$$savedTarget = person;
	}

	public PersonBuilder(ConverterOption option, B parentBuilder) {
		// super(option, parentBuilder);
		this.$$$option = option != null ? option : ConverterOptions.EMPTY_IMMUTABLE_OPTION;
		this.$$$parentBuilder = parentBuilder;
		this.$$$savedTarget = null;
	}

	public PersonBuilder() {
		this.$$$option = ConverterOptions.EMPTY_IMMUTABLE_OPTION;
		this.$$$parentBuilder = null;
		this.$$$savedTarget = null;
	}
	
	public PersonBuilder(ConverterOption option) {
		// super(option);
		this.$$$option = option != null ? option : ConverterOptions.EMPTY_IMMUTABLE_OPTION;
		this.$$$parentBuilder = null;
		this.$$$savedTarget = null;
	}
	
	public ConverterOption getConverterOption() {
		return this.$$$option;
	}
	
	public void setConverterOption(ConverterOption option) {
		this.$$$option = option;
	}
	
	public Person getSavedTarget() {
		return this.$$$savedTarget;
	}

	public boolean convertableTo(Class<?> c) {
		return this.$$$savedTarget != null && c.isAssignableFrom(this.$$$savedTarget.getClass());
	}

	@SuppressWarnings("unchecked")
	public <T> T convertTo(Class<T> c) {
		if (!convertableTo(c)) {
			throw new IllegalArgumentException();
		}
		return (T)this.$$$savedTarget;
	}

    protected void copyAttributes(PersonBuilder<?> copy) {
		// super.copyAttributes(copy);
    	// COPY ATTRIBUTES
    }

    public B end() {
        return this.$$$parentBuilder;
    }

    public PersonBuilder<B> storeTo(BuilderRepository repo, int builderId) {
    	repo.put(builderId, this);
    	return this;
    }
]]></entry>

<entry key="build_methods"><![CDATA[
    public Person toPerson() {
    	return new Converter(this.$$$option).convert(this).to(Person.class);
    }
]]></entry>

<entry key="build_abstract_methods"><![CDATA[
    public abstract Person toPerson();
]]></entry>

<entry key="super_class_build_methods"><![CDATA[
    @Override
    public Student toPerson() {
    	return new Converter(this.$$$option).convert(this).to(Student.class);
    }
]]></entry>

<entry key="fieldname_getter_setter"><![CDATA[
    private String name;

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
    	if (this.$$$savedTarget != null) {
    		throw new IllegalStateException("Cannot mutate fields of immutable objects");
    	}
        this.name = name;
    }
]]></entry>

<entry key="super_class_scalar_field"><![CDATA[
	@Override
    public StudentBuilder<B> name(String name) {
        return (StudentBuilder<B>)super.name(name);
    }
]]></entry>

<entry key="scalar_field"><![CDATA[
    public PersonBuilder<B> name(String name) {
        this.name = name;
        return this;
    }
]]></entry>

<entry key="builder_field"><![CDATA[
    public PersonBuilder<? extends SpeechBuilder<B>> owner() {
        PersonBuilder<SpeechBuilder<B>> owner = new PersonBuilder<SpeechBuilder<B>>(this.$$$option, this);
        this.owner = owner;
        
        return owner;
    }

    public SpeechBuilder<B> owner(PersonBuilder<?> owner) {
        this.owner = owner;
        return this;
    }

    public SpeechBuilder<B> owner(Person owner) {
    	this.owner = new WrapConverter(this.$$$option).convert(owner).to(PersonBuilder.class);
        return this;
    }

    public SpeechBuilder<B> owner$restoreFrom(BuilderRepository repo, int builderId) {
        Object person = repo.get(builderId);
        if (person == null) {
        	if (repo.isSupportLazy()) {
        		repo.addObjectStoredListener(builderId, new Procedure() {
					public void execute(Object... arguments) {
						SpeechBuilder.this.owner = (PersonBuilder<?>)arguments[0];
					}
				});
        	}
        	else {
                throw new IllegalStateException("Object does not exist with id " + builderId);
        	}
        }
        else {
            this.owner = (PersonBuilder<?>)person;
        }
        return this;
    }
]]></entry>

<entry key="super_class_builder_field"><![CDATA[
    @SuppressWarnings("unchecked")
    @Override
    public StudentBuilder<? extends SpeechBuilder<B>> owner() {
        return (StudentBuilder<SpeechBuilder<B>>)super.owner();
    }
    
    public SpeechBuilder<B> owner(PersonBuilder<?> owner) {
		return (SpeechBuilder<B>)super.owner(owner);
    }

    public SpeechBuilder<B> owner(Person owner) {
		return (SpeechBuilder<B>)super.owner(owner);
    }

    public SpeechBuilder<B> owner$restoreFrom(BuilderRepository repo, int builderId) {
		return (SpeechBuilder<B>)super.owner$restoreFrom(repo, builderId);
    }    
]]></entry>

<!-- Copy from SpeechBuilder.java -->
<entry key="list_scalar_field"><![CDATA[
    public SpeechBuilder<B> keyword(String keyword) {
        if (this.keywords == null) {
            this.keywords = new ArrayList<String>();
        }
        this.keywords.add(keyword);
        return this;
    }

    public SpeechBuilder<B> keywords(String ... keywords) {
        if (this.keywords == null) {
            this.keywords = new ArrayList<String>();
        }
        for (String o : keywords) {
            this.keywords.add(o);
        }
        return this;
    }
]]></entry>


<!-- Copy from HobbyBuilder.java -->
<entry key="list_field"><![CDATA[
    public PersonBuilder<HobbyBuilder<B>> person() {
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }

        PersonBuilder<HobbyBuilder<B>> person = new PersonBuilder<HobbyBuilder<B>>(this.$$$option, this);
        
        this.people.add(person);
        
        return person;
    }

    public HobbyBuilder<B> person(PersonBuilder<?> person) {
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }
        this.people.add(person);
        return this;
    }

    public HobbyBuilder<B> person(Person person) {
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }
    	PersonBuilder<?> wrap = new WrapConverter(this.$$$option).convert(person).to(PersonBuilder.class);
        this.people.add(wrap);
        return this;
    }

    public HobbyBuilder<B> people(PersonBuilder<?> ... people) {
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }
        for (PersonBuilder<?> o : people) {
            this.people.add(o);
        }
        return this;
    }

    public HobbyBuilder<B> people(Person ... people) {
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }
        for (Person o : people) {
	    	PersonBuilder<?> wrap = new WrapConverter(this.$$$option).convert(o).to(PersonBuilder.class);
            this.people.add(wrap);
        }
        return this;
    }

    public HobbyBuilder<B> person$restoreFrom(BuilderRepository repo, int builderId) {
        Object person = repo.get(builderId);
        if (this.people == null) {
            this.people = new ArrayList<PersonBuilder<?>>();
        }

        if (person == null) {
        	if (repo.isSupportLazy()) {
                
        		final int size = this.people.size();
        		this.people.add(null);

        		repo.addObjectStoredListener(builderId, new Procedure() {
					public void execute(Object... arguments) {
						HobbyBuilder.this.people.set(size, (PersonBuilder<?>)arguments[0]);
					}
				});
        	}
        	else {
                throw new IllegalStateException("Object does not exist with id " + builderId);
        	}
        }
        else {
            this.people.add((PersonBuilder<?>)person);
        }
    	
    	return this;
    }

    public HobbyBuilder<B> people$restoreFrom(BuilderRepository repo, int ... builderIds) {

    	for (int builderId : builderIds) {
    		person$restoreFrom(repo, builderId);
    	}
    	
    	return this;
    }
]]></entry>

<entry key="map_field"><![CDATA[
    private Map<KeyType, ValueType> hobbyKeywords;
    
    public SpeechBuilder<B> hobbyKeyword(KeyType key, ValueType value) {
    	hobbyKeywords.put(key, value);
    	return this;
    }
]]></entry>

</properties>
