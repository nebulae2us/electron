<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

<entry key="builder_constructors"><![CDATA[
	protected final Sample $$$wrapped;

	protected final P $$$parentBuilder;
	
	public SampleBuilderSpec() {
		this.$$$wrapped = null;
		this.$$$parentBuilder = null;
	}
	
	public SampleBuilderSpec(P parentBuilder) {
		this.$$$wrapped = null;
		this.$$$parentBuilder = parentBuilder;
	}

	protected SampleBuilderSpec(Sample wrapped) {
		this.$$$wrapped = wrapped;
		this.$$$parentBuilder = null;
	}
	
    public SampleBuilderSpec<P> storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }

	public Sample getWrappedObject() {
		return this.$$$wrapped;
	}

	protected void verifyMutable() {
		if (this.$$$wrapped != null) {
    		throw new IllegalStateException("Cannot mutate fields of immutable objects");
		}
	}

	public P end() {
		return this.$$$parentBuilder;
	}

    public Sample toSample() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(Sample.class);
    }
]]></entry>

<entry key="subclass_constructors"><![CDATA[
	public SubSampleBuilderSpec() {
		super();
	}
	
	public SubSampleBuilderSpec(P parentBuilder) {
		super(parentBuilder);
	}

	protected SubSampleBuilderSpec(SubSample wrapped) {
		super(wrapped);
	}

	@Override
	public SubSample getWrappedObject() {
		return (SubSample)this.$$$wrapped;
	}

	@Override
    public SubSampleBuilderSpec<P> storeTo(BuilderRepository repo, Object builderId) {
    	repo.put(builderId, this);
    	return this;
    }
	
    public SubSample toSubSample() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(SubSample.class);
    }
]]></entry>

<entry key="subclass_build_methods"><![CDATA[
    @Override
    public SubSample toSample() {
    	return new Converter(new BuilderAnnotationDestinationClassResolver(), true).convert(this).to(SubSample.class);
    }
]]></entry>

<entry key="builder_fieldname_getter_settter"><![CDATA[
	private String name;
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		verifyMutable();
		this.name = name;
	}
]]></entry>

<entry key="builder_single_type_field"><![CDATA[
	public SampleBuilderSpec<P> name(String name) {
		verifyMutable();
		this.name = name;
		return this;
	}
]]></entry>

<entry key="subclass_single_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec<P> name(String name) {
		return (SubSampleBuilderSpec<P>)super.name(name);
	}
]]></entry>

<entry key="builder_single_type_builder_field"><![CDATA[
	public BlankBuilderSpec<? extends SampleBuilderSpec<P>> blank$begin() {
		BlankBuilderSpec<SampleBuilderSpec<P>> result = new BlankBuilderSpec<SampleBuilderSpec<P>>(this);
		this.blank = result;
		return result;
	}

    public SampleBuilderSpec<P> blank$wrap(Blank blank) {
    	verifyMutable();
    	this.blank = new WrapConverter(Builders.DESTINATION_CLASS_RESOLVER).convert(blank).to(BlankBuilderSpec.class);
        return this;
    }
    
    public SampleBuilderSpec<P> blank$restoreFrom(BuilderRepository repo, Object builderId) {
    	verifyMutable();
    	
        Object restoredObject = repo.get(builderId);
        if (restoredObject == null) {
        	if (repo.isSupportLazy()) {
        		repo.addObjectStoredListener(builderId, new Procedure() {
					public void execute(Object... arguments) {
						SampleBuilderSpec.this.blank = (BlankBuilderSpec<?>)arguments[0];
					}
				});
        	}
        	else {
                throw new IllegalStateException("Object does not exist with id " + builderId);
        	}
        }
        else if (!(restoredObject instanceof BlankBuilderSpec)) {
        	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + BlankBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
        }
        else {
            this.blank = (BlankBuilderSpec<?>)restoredObject;
        }
        return this;
    }
]]></entry>

<entry key="subclass_single_type_builder_field"><![CDATA[
	@SuppressWarnings("unchecked")
	@Override
	public BlankBuilderSpec<? extends SubSampleBuilderSpec<P>> blank$begin() {
		return (BlankBuilderSpec<? extends SubSampleBuilderSpec<P>>)super.blank$begin();
	}

	@Override
    public SubSampleBuilderSpec<P> blank$wrap(Blank blank) {
		return (SubSampleBuilderSpec<P>)super.blank$wrap(blank);
    }

	@Override
    public SubSampleBuilderSpec<P> blank$restoreFrom(BuilderRepository repo, Object builderId) {
		return (SubSampleBuilderSpec<P>)super.blank$restoreFrom(repo, builderId);
    }
]]></entry>

<entry key="builder_collection_type_field"><![CDATA[
	public SampleBuilderSpec<P> names(String ... names) {
		verifyMutable();
		return names(new ListBuilder<String>().add(names).toList());
	}
	
	public SampleBuilderSpec<P> names(Collection<String> names) {
		verifyMutable();
		if (this.names == null) {
			this.names = new ArrayList<String>();
		}
		if (names != null) {
			for (String e : names) {
				this.names.add(e);
			}
		}
		return this;
	}
]]></entry>

<entry key="subclass_collection_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec<P> names(String ... names) {
		return (SubSampleBuilderSpec<P>)super.names(names);
	}

	@Override
	public SubSampleBuilderSpec<P> names(Collection<String> names) {
		return (SubSampleBuilderSpec<P>)super.names(names);
	}
]]></entry>

<entry key="builder_collection_type_builder_field"><![CDATA[
	public BlankBuilderSpec<SampleBuilderSpec<P>> blanks$one() {
		verifyMutable();
		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec<?>>();
		}
		
		BlankBuilderSpec<SampleBuilderSpec<P>> result =
				new BlankBuilderSpec<SampleBuilderSpec<P>>(this);
		
		this.blanks.add(result);
		
		return result;
	}

	public class Blanks$$$builder {
		
		public BlankBuilderSpec<Blanks$$$builder> blank$begin() {
			BlankBuilderSpec<Blanks$$$builder> result = new BlankBuilderSpec<Blanks$$$builder>(this);
			SampleBuilderSpec.this.blanks.add(result);
			return result;
		}
		
		public SampleBuilderSpec<P> end() {
			return SampleBuilderSpec.this;
		}
	}
	
	public Blanks$$$builder blanks$list() {
		verifyMutable();
		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec<?>>();
		}
		return new Blanks$$$builder();
	}

    public SampleBuilderSpec<P> blanks$wrap(Blank ... blanks) {
    	return blanks$wrap(new ListBuilder<Blank>().add(blanks).toList());
    }

    public SampleBuilderSpec<P> blanks$wrap(Collection<Blank> blanks) {
		verifyMutable();

		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec<?>>();
		}
		if (blanks != null) {
			for (Blank e : blanks) {
				BlankBuilderSpec<?> wrapped = new WrapConverter(Builders.DESTINATION_CLASS_RESOLVER).convert(e).to(BlankBuilderSpec.class);
				this.blanks.add(wrapped);
			}
		}
		return this;
    }
    
    public SampleBuilderSpec<P> blanks$restoreFrom(BuilderRepository repo, Object ... builderIds) {
    	return blanks$restoreFrom(repo, new ListBuilder<Object>().add(builderIds).toList());
    }

    public SampleBuilderSpec<P> blanks$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		verifyMutable();

		if (this.blanks == null) {
			this.blanks = new ArrayList<BlankBuilderSpec<?>>();
		}
		if (builderIds != null) {
	    	for (Object builderId : builderIds) {
	            Object restoredObject = repo.get(builderId);
	            if (restoredObject == null) {
	            	if (repo.isSupportLazy()) {
	            		repo.addObjectStoredListener(builderId, new Procedure() {
	    					public void execute(Object... arguments) {
	    						SampleBuilderSpec.this.blanks.add((BlankBuilderSpec<?>)arguments[0]);
	    					}
	    				});
	            	}
	            	else {
	                    throw new IllegalStateException("Object does not exist with id " + builderId);
	            	}
	            }
	            else if (!(restoredObject instanceof BlankBuilderSpec)) {
	            	throw new IllegalStateException("Type mismatch for id: " + builderId + ". " + BlankBuilderSpec.class.getSimpleName() + " vs " + restoredObject.getClass().getSimpleName());
	            }
	            else {
	                this.blanks.add((BlankBuilderSpec<?>)restoredObject);
	            }
	    	}
		}
        return this;
    }
]]></entry>

<entry key="subclass_collection_type_builder_field"><![CDATA[
	@Override
    public SubSampleBuilderSpec<P> blanks$wrap(Blank ... blanks) {
		return (SubSampleBuilderSpec<P>)super.blanks$wrap(blanks);
    }

	@Override
    public SubSampleBuilderSpec<P> blanks$wrap(Collection<Blank> blanks) {
		return (SubSampleBuilderSpec<P>)super.blanks$wrap(blanks);
    }

	@Override
    public SubSampleBuilderSpec<P> blanks$restoreFrom(BuilderRepository repo, Object ... builderIds) {
		return (SubSampleBuilderSpec<P>)super.blanks$restoreFrom(repo, builderIds);
    }

	@Override
    public SubSampleBuilderSpec<P> blanks$restoreFrom(BuilderRepository repo, Collection<Object> builderIds) {
		return (SubSampleBuilderSpec<P>)super.blanks$restoreFrom(repo, builderIds);
    }
]]></entry>

<entry key="builder_map_type_field"><![CDATA[
	public SampleBuilderSpec<P> keywordCounts(Map<String, Integer> keywordCounts) {
		verifyMutable();

		if (this.keywordCounts == null) {
			this.keywordCounts = new HashMap<String, Integer>();
		}
		if (keywordCounts != null) {
			for (Map.Entry<String, Integer> e : keywordCounts.entrySet()) {
				this.keywordCounts.put(e.getKey(), e.getValue());
			}
		}
		return this;
	}
]]></entry>

<entry key="subclass_map_type_field"><![CDATA[
	@Override
	public SubSampleBuilderSpec<P> keywordCounts(Map<String, Integer> keywordCounts) {
		return (SubSampleBuilderSpec<P>)super.keywordCounts(keywordCounts);
	}
]]></entry>






















<entry key="builders_declare"><![CDATA[
package packageName;

import org.nebulae2us.electron.*;
import org.nebulae2us.electron.util.*;
import Person;
public class Builders {

	public static final DestinationClassResolver DESTINATION_CLASS_RESOLVER = new DestinationClassResolverByMap(
			new MapBuilder<Class<?>, Class<?>> ()
				.put(Person.class, PersonBuilder.class)
			.toMap()
			);

]]></entry>

<entry key="builders_each_model_class"><![CDATA[
    public static PersonBuilder<?> person() {
        return new PersonBuilder<Object>();
    }

    public static PersonBuilder<?> person$restoreFrom(BuilderRepository repo, int builderId) {
        return (PersonBuilder<?>)repo.get(builderId);
    }

    public static PersonBuilder<?> person$copyFrom(Person person) {
    	PersonBuilder<?> result = new Converter(DESTINATION_CLASS_RESOLVER, false).convert(person).to(PersonBuilder.class);
    	return result;
    }
]]></entry>



</properties>
